%%%============================================================================
%%% @doc 
%%% A barebones implementation of a gen_event behaviour for the error logger.
%%% @end
%%%============================================================================

-module(custom_error_report).

%% *** There’s no stopping ***
%%
%% The callback functions of a 'gen_server' can return a stop value, telling the 
%% server process to shut down. A 'gen_event' callback can’t do that (because 
%% other registered handlers may not be happy if you kill the entire service). 
%%
%% Instead, the callback can return a 'remove_handler' value, which causes the 
%% 'gen_event' process to remove that handler, calling its terminate callback 
%% function as a last favor.
%%

%% Compile the module as normal and then call its API function 
%% 'custom_error_report:register_with_logger()'' to make it hook itself into 
%% the 'error-logger' event stream.
%%

%% http://www.erlang.org/doc/man/error_logger.html
%% 
%% Warning events was introduced in Erlang/OTP R9C. To retain backwards 
%% compatibility, these are by default tagged as errors, thus showing up as 
%% error reports in the logs. By using the command line flag +W <w | i>, they 
%% can instead be tagged as warnings or info. Tagging them as warnings may 
%% require rewriting existing user defined event handlers.

%%%============================================================================
%%% OTP GenEvent Behaviour
%%%============================================================================

-behaviour(gen_event).

-export([
  init/1, 
  handle_event/2, 
  handle_call/2,
  handle_info/2, 
  terminate/2, 
  code_change/3
]).


%%%============================================================================
%%% Public API
%%%============================================================================

-export([register_with_logger/0]).


%%%============================================================================
%%% Records
%%%============================================================================

-record(state, {}).

%%%============================================================================
%%% Public API Implementation
%%%============================================================================

%% Register this customer GenEvent process with the 'error_logger'
register_with_logger() ->
  % Add this GenEvent process as 'report handler' with the 'error_logger'.
  error_logger:add_report_handler(?MODULE).

init([]) ->
  {ok, #state{}}.

%% Default 'do nothing' implementation.
%% handle_event(_Event, State) ->
%%  {ok, State}.


%% To write received events you receive out to the screen; and to present them 
%% nicely, you need to know what they mean. The error_logger functions generate 
%% a specific set of events: 
%%
%% +---------------------------------------------+------------------+
%% | Event Tuple                                 | Generated By     |
%% +---------------------------------------------+------------------+
%% |{error, Gleader, {Pid,Format,Data}}          | error_msg()      |
%% |{error_report, Gleader, {Pid,Type,Report}}   | error_report()   |
%% |{warning_msg, Gleader, {Pid,Format,Data}}    | warning_msg()    |
%% |{warning_report, Gleader, {Pid,Type,Report}} | warning_report() |
%% |{info_msg, Gleader, {Pid,Format,Data}}       | info_msg()       |
%% |{info_report, Gleader, {Pid,Type,Report}}    | info_report()    |
%% +---------------------------------------------+------------------+
%%
%% NB: These are described in the Erlang/OTP documentation.
%%

handle_event({error, _Gleader, {Pid,Format,Data}}, State) ->
  io:fwrite("Custom Log - ERROR <~p> ~s~n", [Pid, io_lib:format(Format, Data)]),
  {ok, State};
handle_event({error_report, _Gleader, {Pid, std_error, Report}}, State) ->
  io:fwrite("Custom Log - ERROR <~p> ~p~n", [Pid, Report]),
  {ok, State};
handle_event({error_report, _Gleader, {Pid, Type, Report}}, State) ->
  io:fwrite("Custom Log - ERROR <~p> ~p ~p~n", [Pid, Type, Report]),
  {ok, State};
handle_event({warning_msg, _Gleader, {Pid, Format, Data}}, State) ->
  io:fwrite("Custom Log -  WARNING <~p> ~s~n", [Pid, io_lib:format(Format, Data)]),
  {ok, State};
handle_event({warning_report,_Gleader,{Pid,std_warning,Report}}, State) -> 
  io:fwrite("Custom Log -  WARNING <~p> ~p~n", [Pid, Report]),
  {ok, State};
handle_event({warning_report,_Gleader,{Pid, Type, Report}}, State) -> 
  io:fwrite("Custom Log -  WARNING <~p> ~p ~p~n", [Pid, Type, Report]),
  {ok, State};
handle_event({info_msg, _Gleader, {Pid, Format, Data}}, State) ->
  io:fwrite("Custom Log -  <~p> ~s~n", [Pid, io_lib:format(Format, Data)]),
  {ok, State};
handle_event({info_report, _Gleader, {Pid, std_info, Report}}, State) ->
  io:fwrite("Custom Log - INFO <~p> ~p~n", [Pid, Report]),
  {ok, State};
handle_event({info_report, _Gleader, {Pid, Type, Report}}, State) ->
  io:fwrite("Custom Log - INFO <~p> ~p ~p~n", [Pid, Type, Report]),
  {ok, State};
%% Catch any system events (that dont match the handled type syntax).
handle_event(_Event, State) ->
  {ok, State}.


%% Default 'do nothing' implementation.
handle_call(_Request, State) ->
  Reply = ok,
  {ok, Reply, State}.

%% Default 'do nothing' implementation.
handle_info(_Info, State) ->
  {ok, State}.


%% Default 'do nothing' implementation.
terminate(_Reason, _State) ->
  ok.

%% Default 'do nothing' implementation.
code_change(_OldVsn, State, _Extra) ->
  {ok, State}.


%% Example Usage
%%

% $> erl
% Erlang/OTP 17 [erts-6.1] [source] [64-bit] [smp:8:8] [async-threads:10] [hipe] [kernel-poll:false] [dtrace]
%
% Eshell V6.1  (abort with ^G)
% 1> c("custom_error_report.erl").
% {ok,custom_error_report}
% 2> application:start(sasl).
% ok
% 3>
% =PROGRESS REPORT==== 21-Aug-2014::19:04:13 ===
%           supervisor: {local,sasl_safe_sup}
%              started: [{pid,<0.44.0>},
%                        {name,alarm_handler},
%                        {mfargs,{alarm_handler,start_link,[]}},
%                        {restart_type,permanent},
%                        {shutdown,2000},
%                        {child_type,worker}]
%
% =PROGRESS REPORT==== 21-Aug-2014::19:04:13 ===
%           supervisor: {local,sasl_safe_sup}
%              started: [{pid,<0.45.0>},
%                        {name,overload},
%                        {mfargs,{overload,start_link,[]}},
%                        {restart_type,permanent},
%                        {shutdown,2000},
%                        {child_type,worker}]
%
% =PROGRESS REPORT==== 21-Aug-2014::19:04:13 ===
%           supervisor: {local,sasl_sup}
%              started: [{pid,<0.43.0>},
%                        {name,sasl_safe_sup},
%                        {mfargs,
%                            {supervisor,start_link,
%                                [{local,sasl_safe_sup},sasl,safe]}},
%                        {restart_type,permanent},
%                        {shutdown,infinity},
%                        {child_type,supervisor}]
%
% =PROGRESS REPORT==== 21-Aug-2014::19:04:13 ===
%           supervisor: {local,sasl_sup}
%              started: [{pid,<0.46.0>},
%                        {name,release_handler},
%                        {mfargs,{release_handler,start_link,[]}},
%                        {restart_type,permanent},
%                        {shutdown,2000},
%                        {child_type,worker}]
%
% =PROGRESS REPORT==== 21-Aug-2014::19:04:13 ===
%          application: sasl
%           started_at: nonode@nohost
%
% 3> custom_error_report:register_with_logger().
% ok
% 4> error_logger:error_msg("Hello custom event event logger!").
% Custom Log - ERROR <<0.32.0>> Hello custom event event logger!
%
% =ERROR REPORT==== 21-Aug-2014::19:06:29 ===
% Hello custom event event logger!ok
%
% 5> error_logger:info_msg("Hello custom event event logger!").
% Custom Log - INFO <<0.32.0>> Hello custom event event logger!
%
% =INFO REPORT==== 21-Aug-2014::19:06:58 ===
% Hello custom event event logger!ok
% 6>

